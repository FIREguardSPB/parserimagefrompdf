{"version":3,"sources":["Utils/parserFront.js","Utils/fileSaver.js","components/UIcomponents.js","App.js","index.js"],"names":["parserFront","existingPdfBytes","a","myBuffer","Buffer","from","split","convertedBuffer","Uint8Array","firstBeginSignatureSymbol","parseInt","secondBeginSignatureSymbol","indexesStartSignatureImage","forEach","el","i","push","resultSlicedCodeImage","reduce","arr","slice","length","file","fileSaver","alert","e","console","log","blob","Blob","type","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","remove","Container","styled","div","App","useState","data","setData","onLinkClick","fetch","method","headers","JSON","stringify","action","accept","onChange","target","files","reader","FileReader","addEventListener","event","result","readAsDataURL","onClick","name","preventDefault","finally","style","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fcf8016b.chunk.js","sourcesContent":["import fileSaver from \"./fileSaver\";\r\n\r\nexport default async function parserFront(existingPdfBytes) {\r\n  try {\r\n    const myBuffer = Buffer.from(existingPdfBytes.split(',')[1], 'base64');\r\n    const convertedBuffer = new Uint8Array(myBuffer)\r\n    const firstBeginSignatureSymbol = parseInt('ff', 16)\r\n    const secondBeginSignatureSymbol = parseInt('d8', 16)\r\n    const indexesStartSignatureImage = []\r\n    convertedBuffer.forEach((el, i) => {\r\n      if (el === firstBeginSignatureSymbol &&\r\n        convertedBuffer[i + 1] === secondBeginSignatureSymbol &&\r\n        convertedBuffer[i + 2] === firstBeginSignatureSymbol &&\r\n        (convertedBuffer[i + 3] === parseInt('e0', 16) ||\r\n          convertedBuffer[i + 3] === parseInt('e1', 16) ||\r\n          convertedBuffer[i + 3] === parseInt('e2', 16) ||\r\n          convertedBuffer[i + 3] === parseInt('e3', 16) ||\r\n          convertedBuffer[i + 3] === parseInt('e8', 16))) {\r\n        indexesStartSignatureImage.push(i)\r\n      }\r\n    })\r\n    const resultSlicedCodeImage = indexesStartSignatureImage.reduce((arr, el) => {\r\n      arr.push(convertedBuffer.slice(el));\r\n      return arr\r\n    }, [])\r\n    if (!resultSlicedCodeImage.length) {\r\n      alert('Изображений в файле нет')\r\n    } else {\r\n      resultSlicedCodeImage.forEach((file, i) => {\r\n        fileSaver(file, i)\r\n      })\r\n    }\r\n  }\r\n  catch (e) {\r\n    console.log(e)\r\n  }\r\n}","export default function fileSaver(file, i) {\r\n  try {\r\n    const blob = new Blob([file], {type: 'image/jpeg'})\r\n    console.log(blob)\r\n    const downloadUrl = window.URL.createObjectURL(blob)\r\n    console.log(downloadUrl)\r\n    const link = document.createElement('a')\r\n    link.href = downloadUrl\r\n    link.download = `image_from_pdf_${i}.jpg`\r\n    document.body.appendChild(link)\r\n    link.click()\r\n    link.remove()\r\n  }\r\n  catch (e) {\r\n    console.log(e)\r\n  }\r\n}","import styled from \"styled-components\";\r\n\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  //display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-left: 15px;\r\n  padding-right: 15px;\r\n  border: 1px solid;\r\n  border-radius: 10px;\r\n\r\n  @media (min-width: 1200px) {\r\n    width: 350px;\r\n    max-width: 100%;\r\n  }\r\n\r\n  :before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  :after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n  }\r\n`","import './App.css';\nimport {useState} from \"react\";\nimport {\n  Container\n} from \"./components/UIcomponents\";\nimport parserFront from './Utils/parserFront.js'\n\nfunction App() {\n  const [data, setData] = useState(null)\n  const onClickSelected = () => {\n    fetch('/api/clicked', {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({action: 'click on SELECT'})\n    })\n  }\n  const onLoad = (e) => {\n    try {\n      const file = e.target.files[0]\n      const reader = new FileReader();\n      reader.addEventListener('load', (event) => {\n        setData(event.target.result)\n      });\n      reader.addEventListener('error', (event) => {\n        alert('Ошибка чтения файла')\n      })\n      if (file) {\n        reader.readAsDataURL(file)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  // const onSend = async (e) => {\n  // \tif (data) {\n  // \t\te.preventDefault();\n  // \t\tawait fetch('/api/upload', {\n  // \t\t\tmethod: \"POST\",\n  // \t\t\t// headers: {\n  // \t\t\t// \t'Accept': 'data/*',\n  // \t\t\t// \t'Content-Type': 'application/octet-stream'\n  // \t\t\t// },\n  // \t\t\tbody: new FormData(e)\n  // \t\t})\n  // \t}\n  // \telse {\n  // \t\talert('Выберите файл')\n  // \t}\n  // }\n  \n  // const OnSubmit = async (event) => {\n  //   event.preventDefault();\n  //   const formData = new FormData();\n  //   formData.append('file', data);\n  //   await fetch(\"/api/upload\", {\n  //     method: 'POST',\n  //     body: formData\n  //   })\n  // }\n  const onLinkClick = async (e) => {\n    try {\n      await fetch('/api/clicked', {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({action: 'click link'})\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  const onButton = (e) => {\n    try {\n      e.preventDefault()\n      parserFront(data)\n        .finally(() => {\n          fetch('/api/clicked', {\n            method: \"POST\",\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({action: 'click on button'})\n          })\n        })\n      \n    } catch (e) {\n      console.log(e)\n    }\n  }\n  \n  \n  return (\n    <>\n      <Container>\n        <br/>\n        <a><b>Онлайн парсер изображений из PDF файлов</b></a>\n        <br/>\n        {/*<form onSubmit={OnSubmit}>*/}\n        <input type='file' accept='.pdf' onChange={onLoad} onClick={onClickSelected} name='file'/>\n        {/*<input type=\"submit\" value=\"Отправить\"  /><br/>*/}\n        {/*</form>*/}\n        {data ? <button onClick={onButton} style={{'margin-top': '10px', 'align-item': 'center'}}>Найти и сохранить\n          изображения</button> : null}\n        <br/>\n        <br/>\n        <br/>\n        by Sokolov A.A.\n        <a href={'https://github.com/FIREguardSPB'} onClick={onLinkClick}>https://github.com/FIREguardSPB</a>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}